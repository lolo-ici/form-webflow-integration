/**
 * @formcrafts/embed
 * Copyright (c) 2024-2024, Nishant Agrawal. (MIT Licensed)
 * https://github.com/formcrafts/embed
 */

/**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */

'use strict';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var Drawer = /** @class */ (function () {
    function Drawer(drawerElement, options) {
        this.drawerElement = drawerElement;
        this.options = options;
        drawerElement.drawerInstance = this;
        drawerElement.classList.add("fc-modal");
        this.bindEvents();
    }
    Drawer.prototype.bindEvents = function () {
        var _this = this;
        var _a;
        (_a = this.drawerElement.querySelector(".handle")) === null || _a === void 0 ? void 0 : _a.addEventListener("touchstart", function (e) { return _this.close(); });
        this.drawerElement.addEventListener("click", function (e) {
            if (e.target === _this.drawerElement)
                _this.close();
        });
        document.addEventListener("keydown", function (e) {
            if (e.key === "Escape")
                _this.close();
        });
    };
    Drawer.prototype.open = function () {
        var _this = this;
        document.body.style.overflow = "hidden";
        if (this.options.awaitOpenAnimation) {
            this.drawerElement.addEventListener("animationend", function () {
                _this.afterOpen();
            }, { once: true });
        }
        this.drawerElement.setAttribute("aria-hidden", "false");
        this.drawerElement.classList.add(this.options.openClass || "open");
        if (!this.options.awaitOpenAnimation) {
            this.afterOpen();
        }
    };
    Drawer.prototype.afterOpen = function () {
        if (this.options.onOpen)
            this.options.onOpen();
    };
    Drawer.prototype.close = function () {
        var _this = this;
        document.body.style.overflow = "";
        this.drawerElement.setAttribute("aria-hidden", "true");
        if (this.options.awaitCloseAnimation) {
            this.drawerElement.addEventListener("animationend", function () {
                _this.afterClose();
            }, { once: true });
        }
        if (!this.options.awaitCloseAnimation) {
            this.afterClose();
        }
    };
    Drawer.prototype.afterClose = function () {
        this.drawerElement.classList.remove(this.options.openClass || "open");
        if (this.options.onClose)
            this.options.onClose();
    };
    return Drawer;
}());

var css = ".fc-modal{display:none;z-index:999;position:fixed;top:0;left:0;right:0;bottom:0;overflow-y:auto;background:rgba(0,2,4,0.6);justify-content:center;align-items:center;padding:10vh 0;overscroll-behavior:none;will-change:background-color;--slide-up-distance:8px;--slide-up-duration:200ms;}.fc-modal.fc-is-open{display:flex;}.fc-modal__container{will-change:transform;position:fixed;}.fc-modal__container{display:flex;width:100%;box-shadow:0 0 12px rgba(0,0,0,0.4);background-color:#fff;max-height:70vh;border-radius:0.5rem;overflow-y:auto;box-sizing:border-box;max-width:90vw;overscroll-behavior:contain;}.fc-modal__container iframe{min-height:200px;overscroll-behavior:contain;}@container (max-width:768px){.fc-modal{padding-bottom:0;align-items:flex-end;--slide-up-distance:30px;--slide-up-duration:300ms;}.fc-modal__container{align-self:flex-end;box-shadow:0 -5px 15px rgba(0,0,0,0.3);border-top-left-radius:0.5rem;border-top-right-radius:0.5rem;border-bottom-left-radius:0px;border-bottom-right-radius:0px;max-width:initial!important;width:100%;max-height:70%;}}@media (max-width:768px){.fc-modal{padding-bottom:0;align-items:flex-end;--slide-up-distance:30px;--slide-up-duration:300ms;}.fc-modal__container{align-self:flex-end;box-shadow:0 -5px 15px rgba(0,0,0,0.3);border-top-left-radius:0.5rem;border-top-right-radius:0.5rem;border-bottom-left-radius:0px;border-bottom-right-radius:0px;max-width:initial!important;width:100%;max-height:70%;}}.modal__close{background:0 0;border:0;}.modal__header .modal__close:before{content:\"\\2715\";}.modal__content{margin:2rem 0;line-height:1.5;color:rgba(0,0,0,0.8);}.fc-modal[aria-hidden=\"false\"],.fc-modal[aria-hidden=\"true\"]{animation-duration:var(--slide-up-duration);animation-timing-function:cubic-bezier(0,0,0.2,1);}.fc-modal[aria-hidden=\"false\"] .fc-modal__container,.fc-modal[aria-hidden=\"true\"] .fc-modal__container{animation-duration:var(--slide-up-duration);animation-timing-function:cubic-bezier(0,0,0,1);}@keyframes fcFadeIn{from{background:rgba(0,2,4,0);}to{background:rgba(0,2,4,0.6);}}@keyframes fcFadeOut{from{background:rgba(0,2,4,0.6);}to{background:rgba(0,2,4,0);}}@keyframes fcSlideUp{from{opacity:0;transform:translateY(var(--slide-up-distance));}to{opacity:1;transform:translateY(0);}}@keyframes fcSlideDown{from{opacity:1;transform:translateY(0);}to{opacity:0;transform:translateY(var(--slide-up-distance));}}.fc-modal[aria-hidden=\"false\"]{animation-name:fcFadeIn;}.fc-modal[aria-hidden=\"true\"]{animation-name:fcFadeOut;}.fc-modal[aria-hidden=\"false\"] .fc-modal__container{animation-name:fcSlideUp;}.fc-modal[aria-hidden=\"true\"] .fc-modal__container{animation-name:fcSlideDown;}";

function getCookie(name) {
    if (typeof document === "undefined")
        return;
    var value = "; ".concat(document.cookie);
    var parts = value.split("; ".concat(name, "="));
    if (parts.length === 2)
        return parts.pop().split(";").shift();
}
var debug = typeof window !== "undefined" && window.location &&
    window.location.search.indexOf("debug=true") !== -1;
var authorizedDomain = [
    "https://app.formcrafts.com",
    "https://5173.formcrafts.com",
    "https://app.localhost:5173",
];
var iframeShadow = "rgba(0, 5, 10, 0.08) 0px 0px 0px 0.5px, rgba(50, 55, 60, 0.04) 2px 3px 2px 0px, rgba(50, 50, 50, 0.03) -2px -2px 2px 0px, rgba(80, 80, 80, 0.176) 0px 7px 5px -7px";
// iframeSrc util
function buildIframeSrc(options) {
    var _a;
    var base = (_a = options.formBase) !== null && _a !== void 0 ? _a : "https://app.formcrafts.com";
    var url = new URL("".concat(base, "/").concat(options.form));
    url.searchParams.set("iframe", "true");
    if (typeof options.seamless !== "undefined" && options.seamless === true) {
        url.searchParams.set("seamless", "true");
    }
    if (typeof options._params !== "undefined") {
        options._params.forEach(function (value, key) {
            url.searchParams.set(key, value);
        });
    }
    return url.href;
}
function buildIframeSrcPopup(options) {
    var _a;
    var base = (_a = options.formBase) !== null && _a !== void 0 ? _a : "https://app.formcrafts.com";
    var url = new URL("".concat(base, "/").concat(options.form));
    url.searchParams.set("iframe", "true");
    url.searchParams.set("popup", "true");
    if (typeof options._params !== "undefined") {
        options._params.forEach(function (value, key) {
            url.searchParams.set(key, value);
        });
    }
    return url.href;
}
function observeVisibility(targets, callback) {
    var handleIntersection = function (entries, observer) {
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var entry = entries_1[_i];
            if (entry.isIntersecting) {
                callback();
                observer.disconnect();
                return;
            }
        }
    };
    var observer = new IntersectionObserver(handleIntersection);
    if (Array.isArray(targets)) {
        targets.forEach(function (target) { return observer.observe(target); });
    }
    else {
        observer.observe(targets);
    }
}
function adjustIframeHeight(iframe, newHeight, target) {
    if (typeof newHeight === "undefined")
        return;
    if (target) {
        target.style.height = "";
    }
    iframe.style.height = "".concat(newHeight, "px");
    iframe.style.visibility = "visible";
    iframe.style.position = "static";
}
function createEventListeners(iframe, options, type) {
    var _a;
    var seamless = (_a = ("seamless" in options && (options === null || options === void 0 ? void 0 : options.seamless))) !== null && _a !== void 0 ? _a : false;
    window.addEventListener("message", function (event) {
        var _a;
        if (iframe.contentWindow !== event.source)
            return;
        if (authorizedDomain.indexOf(event.origin) === -1)
            return false;
        if (debug) {
            console.debug("Received message", event.data);
        }
        if (event.data.type === "ga_event" &&
            typeof window.gtag !== "undefined") {
            var ga_event = event.data.content;
            window.gtag("event", ga_event.type, ga_event.attributes);
        }
        if (event.data.type === "gtm_event" &&
            typeof window.dataLayer !== "undefined") {
            var gtm_event = event.data.content;
            window.dataLayer.push(__assign({ event: gtm_event.type }, gtm_event.attributes));
        }
        if (event.data.type === "load") {
            iframe.contentWindow.postMessage({
                type: "load:ok",
                content: "ok",
            }, "*");
            var hubspotUtk = getCookie("hubspotutk");
            // Send hubspotutk to iframe
            if (iframe.contentWindow) {
                if (hubspotUtk) {
                    iframe.contentWindow.postMessage({
                        type: "hubspotutk",
                        content: hubspotUtk,
                    }, "*");
                }
                // Send url to iframe
                iframe.contentWindow.postMessage({
                    type: "url",
                    content: window.location.href,
                }, "*");
                // Send page title to iframe
                iframe.contentWindow.postMessage({
                    type: "title",
                    content: document.title,
                }, "*");
                // Send window.innerHeight to iframe
                iframe.contentWindow.postMessage({
                    type: "windowInnerHeight",
                    content: window.innerHeight,
                }, "*");
                var prefill = (_a = options.values) !== null && _a !== void 0 ? _a : {};
                iframe.contentWindow.postMessage({
                    type: "values",
                    content: prefill,
                }, "*");
                if (options.redirectWithin) {
                    iframe.contentWindow.postMessage({
                        type: "redirectWithin",
                        content: true,
                    }, "*");
                }
            }
            var events_1 = iframe._formcraftsEvents;
            if (events_1.load) {
                events_1.load.forEach(function (callback) { return callback(); });
            }
        }
        if (event.data.type === "page") {
            var rect = iframe.getBoundingClientRect();
            var isVisible = rect.top >= 0 && rect.top <= window.innerHeight;
            if (!isVisible) {
                if (type === "embed") {
                    window.scrollBy({
                        top: rect.top -
                            parseFloat(getComputedStyle(document.documentElement).fontSize) *
                                2,
                        behavior: "smooth",
                    });
                }
                else {
                    iframe.scrollIntoView({
                        behavior: "smooth",
                        block: "start",
                    });
                }
            }
        }
        if (event.data.type === "height") {
            var target = "target" in options ? options.target : null;
            adjustIframeHeight(iframe, event.data.content, target);
        }
        if (event.data.type === "redirect") {
            window.location.href = event.data.content;
        }
        if (event.data.type === "scrollIntoView") {
            var iframeRect = iframe.getBoundingClientRect();
            var elementRect = event.data.content;
            var pseudoElement = document.createElement("div");
            pseudoElement.style.position = "absolute";
            pseudoElement.style.top = "".concat(iframeRect.top + elementRect.top + window.scrollY, "px");
            pseudoElement.style.left = "".concat(iframeRect.left + elementRect.left + window.scrollX, "px");
            pseudoElement.style.width = "".concat(elementRect.width, "px");
            pseudoElement.style.height = "".concat(elementRect.height, "px");
            document.body.appendChild(pseudoElement);
            pseudoElement.scrollIntoView({
                behavior: "smooth",
                block: "center",
                inline: "nearest",
            });
            pseudoElement.remove();
        }
        if (event.data.type === "background" && !seamless) {
            iframe.style.background = event.data.content;
        }
        if (event.data.type === "name") {
            iframe.ariaLabel = event.data.content;
            iframe.title = event.data.content;
        }
        if (event.data.type === "submit:success" ||
            event.data.type === "submitSuccess") {
            var events_2 = iframe._formcraftsEvents;
            if (events_2["submit:success"]) {
                events_2["submit:success"].forEach(function (callback) { return callback(); });
            }
        }
        if (event.data.type === "success" && type === "embed") {
            var rect = iframe.getBoundingClientRect();
            var isVisible = rect.top >= 0 && rect.top <= window.innerHeight;
            if (!isVisible) {
                window.scrollBy({
                    top: rect.top -
                        parseFloat(getComputedStyle(document.documentElement).fontSize) * 1,
                    behavior: "smooth",
                });
            }
        }
        if (event.data.type === "close" && type === "popup" && options) {
            var modalId = "fc-modal-".concat(options.form);
            var existingModal = document.getElementById(modalId);
            var existingDrawer = existingModal.drawerInstance;
            existingDrawer.close();
        }
    });
}
/**
 * Creates an inline form using an iframe.
 *
 * @param {EmbedOptions} options - The options for the form.
 * @returns {ReturnType} The return type of the createReturn function.
 */
function createInlineForm(options) {
    // Check if widget is already created
    var iframe;
    var exists = false;
    if (options.target.querySelector("iframe")) {
        exists = true;
        iframe = options.target.querySelector("iframe");
    }
    else {
        iframe = document.createElement("iframe");
        iframe.style.position = "absolute";
        iframe.style.visibility = "hidden";
    }
    if (typeof options.seamless === "undefined") {
        options.seamless = false;
    }
    createEventListeners(iframe, options, "embed");
    var targetStyles = window.getComputedStyle(options.target);
    options.target.style.display = "flex";
    options.target.style.justifyContent = "stretch";
    options.target.style.width = "100%";
    iframe.dataset.src = buildIframeSrc(options);
    iframe.title = "Formcrafts form";
    iframe.style.border = "none";
    iframe.style.width = targetStyles.getPropertyValue("width");
    iframe.scrolling = "no";
    iframe.ariaLabel = "Formcrafts form";
    iframe.name = "formcrafts-iframe";
    iframe.classList.add("fc-inline-iframe");
    iframe.onload = function () {
        options.target.style.overflow = "initial";
        console.log("iframe loaded", "".concat(options.width, "px"));
        if (typeof options.width !== "undefined" && options.width !== null) {
            iframe.style.width = "".concat(options.width, "px");
        }
        else {
            iframe.style.width = "100%";
        }
        iframe.style.maxWidth = "100%";
        iframe.style.transition = "height 0ms linear";
        iframe.style.willChange = "height";
    };
    if (typeof options.width !== "undefined" && options.width !== null) {
        console.log("setting width", "".concat(options.width, "px"));
        iframe.style.width = "".concat(options.width, "px");
        iframe.style.maxWidth = "100%";
    }
    if (!options.seamless) {
        iframe.style.boxShadow = iframeShadow;
        iframe.style.borderRadius = "0.5rem";
    }
    observeVisibility(iframe, function () {
        if (typeof iframe.dataset.src !== "undefined") {
            iframe.src = iframe.dataset.src;
            iframe.removeAttribute("data-src");
        }
    });
    if (exists === false) {
        options.target.innerHTML = "";
        options.target.appendChild(iframe);
    }
    return createReturn(iframe);
}
function createReturn(iframe, options) {
    var instance = {
        on: function (event, callback) {
            var events = iframe._formcraftsEvents;
            events[event] = events[event] || [];
            events[event].push(callback);
        },
        values: function (values) {
            var _a;
            (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
                type: "values",
                content: values,
            }, "*");
        },
        destroy: function () {
            iframe === null || iframe === void 0 ? void 0 : iframe.remove();
        },
    };
    iframe._formcraftsInstance = instance;
    iframe._formcraftsEvents = {};
    return instance;
}
function createPopupReturn(drawer, config) {
    var iframe = drawer.drawerElement.querySelector("iframe");
    var instance = {
        on: function (event, callback) {
            var events = iframe._formcraftsEvents;
            events[event] = events[event] || [];
            events[event].push(callback);
        },
        load: function () {
            if (iframe) {
                var src = iframe.dataset.src;
                if (src) {
                    iframe.src = iframe.dataset.src;
                    iframe.removeAttribute("data-src");
                }
            }
        },
        values: function (values) {
            var _a;
            (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
                type: "values",
                content: values,
            }, "*");
        },
        open: function () {
            if (iframe) {
                var src = iframe.dataset.src;
                if (src) {
                    iframe.src = iframe.dataset.src;
                    iframe.removeAttribute("data-src");
                }
            }
            drawer.open();
        },
        close: function () {
            drawer.close();
        },
        destroy: function () {
            drawer.drawerElement.remove();
        },
    };
    iframe._formcraftsInstance = instance;
    iframe._formcraftsEvents = {};
    return instance;
}
// Create popup
function createPopup(options) {
    var modalConfig = {
        openClass: "fc-is-open",
        awaitOpenAnimation: true,
        awaitCloseAnimation: true,
    };
    var width = typeof options.width === "undefined" ? 500 : options.width;
    // Create modal elements
    var modalId = "fc-modal-".concat(options.form);
    // Check if modal exists
    if (document.getElementById(modalId)) {
        var existingModal = document.getElementById(modalId);
        var existingDrawer = existingModal.drawerInstance;
        return createPopupReturn(existingDrawer);
    }
    // Get / create style
    if (!document.getElementById("fc-modal-css")) {
        var style = document.createElement("style");
        style.id = "fc-modal-css";
        style.appendChild(document.createTextNode(css));
        document.head.appendChild(style);
    }
    var modal = document.createElement("div");
    modal.id = modalId;
    modal.classList.add("fc-modal");
    modal.ariaHidden = "true";
    var modalContainer = document.createElement("div");
    modalContainer.style.maxWidth = "min(90vw,".concat(width, "px)");
    modalContainer.style.visibility = "hidden";
    modalContainer.role = "dialog";
    modalContainer.setAttribute("aria-modal", "true");
    modalContainer.classList.add("fc-modal__container");
    // Create form iframe
    var iframe = document.createElement("iframe");
    createEventListeners(iframe, options, "popup");
    iframe.dataset.src = buildIframeSrcPopup(options);
    iframe.title = "Formcrafts popup form";
    iframe.style.border = "none";
    iframe.style.width = "100%";
    iframe.ariaLabel = "Formcrafts popup form";
    iframe.name = "formcrafts-popup-iframe";
    iframe.style.willChange = "height";
    iframe.style.position = "static";
    iframe.style.transition = "height 0ms linear";
    iframe.style.willChange = "height";
    iframe.scrolling = "no";
    iframe.onload = function () {
        modalContainer.style.visibility = "visible";
    };
    modal.appendChild(modalContainer);
    modalContainer.appendChild(iframe);
    if (options.appendTo) {
        options.appendTo.appendChild(modal);
    }
    else {
        document.body.appendChild(modal);
    }
    var myDrawer = new Drawer(modal, modalConfig);
    return createPopupReturn(myDrawer);
}

exports.createInlineForm = createInlineForm;
exports.createPopup = createPopup;
exports.observeVisibility = observeVisibility;
//# sourceMappingURL=embed.cjs.map
